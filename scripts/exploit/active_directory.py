#!/usr/bin/env python3

import logging
import subprocess
import os
import time
import json
import re
from typing import Dict, List
from impacket.ldap import ldap, ldapasn1
from impacket.smbconnection import SMBConnection
from pymetasploit3.msfrpc import MsfRpcClient

logger = logging.getLogger(__name__)

class ActiveDirectory:
    def __init__(self, msf_client: MsfRpcClient, config: Dict):
        """Inicializa el módulo de Active Directory"""
        self.msf_client = msf_client
        self.config = config
        self.temp_dir = os.path.join(os.path.dirname(__file__), "..", "..", "temp")
        os.makedirs(self.temp_dir, exist_ok=True)
    
    def enumerate_ad(self, target: str, credentials: Dict = None) -> Dict:
        """Realiza enumeración completa de Active Directory"""
        result = {
            "domain_info": {},
            "users": [],
            "groups": [],
            "computers": [],
            "gpos": [],
            "ous": [],
            "trusts": [],
            "dns_records": []
        }
        
        try:
            # Obtener información del dominio
            domain_info = self._get_domain_info(target, credentials)
            result["domain_info"] = domain_info
            
            # Enumerar usuarios
            users = self._enumerate_users(target, credentials)
            result["users"] = users
            
            # Enumerar grupos
            groups = self._enumerate_groups(target, credentials)
            result["groups"] = groups
            
            # Enumerar computadoras
            computers = self._enumerate_computers(target, credentials)
            result["computers"] = computers
            
            # Enumerar GPOs
            gpos = self._enumerate_gpos(target, credentials)
            result["gpos"] = gpos
            
            # Enumerar OUs
            ous = self._enumerate_ous(target, credentials)
            result["ous"] = ous
            
            # Enumerar trusts
            trusts = self._enumerate_trusts(target, credentials)
            result["trusts"] = trusts
            
            # Enumerar registros DNS
            dns_records = self._enumerate_dns_records(target, credentials)
            result["dns_records"] = dns_records
        
        except Exception as e:
            logger.error(f"Error en enumeración de Active Directory: {str(e)}")
        
        return result
    
    def _get_domain_info(self, target: str, credentials: Dict = None) -> Dict:
        """Obtiene información del dominio"""
        domain_info = {}
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar información del dominio
            searchFilter = "(objectClass=domain)"
            attributes = [
                "dc",
                "distinguishedName",
                "objectGUID",
                "whenCreated",
                "whenChanged",
                "msDS-Behavior-Version",
                "msDS-FunctionalLevel"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    for attribute in item['attributes']:
                        domain_info[str(attribute['type'])] = str(attribute['vals'][0])
        
        except Exception as e:
            logger.error(f"Error al obtener información del dominio: {str(e)}")
        
        return domain_info
    
    def _enumerate_users(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera usuarios del dominio"""
        users = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar usuarios
            searchFilter = "(&(objectClass=user)(objectCategory=person))"
            attributes = [
                "sAMAccountName",
                "displayName",
                "description",
                "memberOf",
                "userAccountControl",
                "pwdLastSet",
                "lastLogon",
                "whenCreated",
                "whenChanged"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    user = {}
                    for attribute in item['attributes']:
                        user[str(attribute['type'])] = str(attribute['vals'][0])
                    users.append(user)
        
        except Exception as e:
            logger.error(f"Error al enumerar usuarios: {str(e)}")
        
        return users
    
    def _enumerate_groups(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera grupos del dominio"""
        groups = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar grupos
            searchFilter = "(objectClass=group)"
            attributes = [
                "sAMAccountName",
                "description",
                "member",
                "groupType",
                "whenCreated",
                "whenChanged"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    group = {}
                    for attribute in item['attributes']:
                        group[str(attribute['type'])] = str(attribute['vals'][0])
                    groups.append(group)
        
        except Exception as e:
            logger.error(f"Error al enumerar grupos: {str(e)}")
        
        return groups
    
    def _enumerate_computers(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera computadoras del dominio"""
        computers = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar computadoras
            searchFilter = "(objectClass=computer)"
            attributes = [
                "sAMAccountName",
                "dNSHostName",
                "operatingSystem",
                "operatingSystemVersion",
                "lastLogon",
                "whenCreated",
                "whenChanged"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    computer = {}
                    for attribute in item['attributes']:
                        computer[str(attribute['type'])] = str(attribute['vals'][0])
                    computers.append(computer)
        
        except Exception as e:
            logger.error(f"Error al enumerar computadoras: {str(e)}")
        
        return computers
    
    def _enumerate_gpos(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera GPOs del dominio"""
        gpos = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar GPOs
            searchFilter = "(objectClass=groupPolicyContainer)"
            attributes = [
                "displayName",
                "description",
                "whenCreated",
                "whenChanged",
                "gPCFileSysPath",
                "versionNumber"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    gpo = {}
                    for attribute in item['attributes']:
                        gpo[str(attribute['type'])] = str(attribute['vals'][0])
                    gpos.append(gpo)
        
        except Exception as e:
            logger.error(f"Error al enumerar GPOs: {str(e)}")
        
        return gpos
    
    def _enumerate_ous(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera OUs del dominio"""
        ous = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar OUs
            searchFilter = "(objectClass=organizationalUnit)"
            attributes = [
                "ou",
                "description",
                "whenCreated",
                "whenChanged",
                "gPLink"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    ou = {}
                    for attribute in item['attributes']:
                        ou[str(attribute['type'])] = str(attribute['vals'][0])
                    ous.append(ou)
        
        except Exception as e:
            logger.error(f"Error al enumerar OUs: {str(e)}")
        
        return ous
    
    def _enumerate_trusts(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera trusts del dominio"""
        trusts = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar trusts
            searchFilter = "(objectClass=trustedDomain)"
            attributes = [
                "trustPartner",
                "trustDirection",
                "trustType",
                "trustAttributes",
                "whenCreated",
                "whenChanged"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    trust = {}
                    for attribute in item['attributes']:
                        trust[str(attribute['type'])] = str(attribute['vals'][0])
                    trusts.append(trust)
        
        except Exception as e:
            logger.error(f"Error al enumerar trusts: {str(e)}")
        
        return trusts
    
    def _enumerate_dns_records(self, target: str, credentials: Dict = None) -> List[Dict]:
        """Enumera registros DNS del dominio"""
        dns_records = []
        
        try:
            # Crear conexión LDAP
            ldap_conn = ldap.LDAPConnection(f"ldap://{target}")
            if credentials:
                ldap_conn.login(credentials.get("username", ""), credentials.get("password", ""))
            else:
                ldap_conn.login("", "")
            
            # Buscar registros DNS
            searchFilter = "(objectClass=dnsNode)"
            attributes = [
                "dnsRecord",
                "dnsTombstoned",
                "whenCreated",
                "whenChanged"
            ]
            
            resp = ldap_conn.search(searchFilter=searchFilter, attributes=attributes)
            
            for item in resp:
                if isinstance(item, ldapasn1.SearchResultEntry):
                    dns_record = {}
                    for attribute in item['attributes']:
                        dns_record[str(attribute['type'])] = str(attribute['vals'][0])
                    dns_records.append(dns_record)
        
        except Exception as e:
            logger.error(f"Error al enumerar registros DNS: {str(e)}")
        
        return dns_records 