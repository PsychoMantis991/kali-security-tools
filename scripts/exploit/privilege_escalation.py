#!/usr/bin/env python3

import logging
import os
import subprocess
import json
from typing import Dict, List
from pymetasploit3.msfrpc import MsfRpcClient

logger = logging.getLogger(__name__)

class PrivilegeEscalation:
    def __init__(self, msf_client: MsfRpcClient, config: Dict):
        """Inicializa el módulo de escalación de privilegios"""
        self.msf_client = msf_client
        self.config = config
        self.temp_dir = os.path.join(os.path.dirname(__file__), "..", "..", "temp")
        os.makedirs(self.temp_dir, exist_ok=True)
    
    def escalate_privileges(self, target: str, credentials: Dict = None) -> Dict:
        """Realiza escalación de privilegios"""
        results = {
            "linux": {},
            "windows": {},
            "successful": False,
            "method": "",
            "details": {}
        }
        
        try:
            # Detectar sistema operativo
            os_type = self._detect_os(target, credentials)
            
            if os_type == "linux":
                results["linux"] = self._escalate_linux(target, credentials)
                if results["linux"].get("success"):
                    results["successful"] = True
                    results["method"] = results["linux"]["method"]
                    results["details"] = results["linux"]["details"]
            
            elif os_type == "windows":
                results["windows"] = self._escalate_windows(target, credentials)
                if results["windows"].get("success"):
                    results["successful"] = True
                    results["method"] = results["windows"]["method"]
                    results["details"] = results["windows"]["details"]
        
        except Exception as e:
            logger.error(f"Error en escalación de privilegios: {str(e)}")
        
        return results
    
    def _detect_os(self, target: str, credentials: Dict = None) -> str:
        """Detecta el sistema operativo del objetivo"""
        try:
            if not self.msf_client:
                return "unknown"
            
            # Usar módulo de Metasploit para detección de OS
            os_module = self.msf_client.modules.use('auxiliary', 'scanner/ssh/ssh_version')
            os_module['RHOSTS'] = target
            result = os_module.execute()
            
            if result and "os" in result:
                if "windows" in result["os"].lower():
                    return "windows"
                elif "linux" in result["os"].lower():
                    return "linux"
            
            return "unknown"
        
        except Exception as e:
            logger.error(f"Error al detectar OS: {str(e)}")
            return "unknown"
    
    def _escalate_linux(self, target: str, credentials: Dict = None) -> Dict:
        """Realiza escalación de privilegios en Linux"""
        results = {
            "success": False,
            "method": "",
            "details": {},
            "sudo_commands": [],
            "suid_binaries": [],
            "cron_jobs": [],
            "kernel_exploits": []
        }
        
        try:
            if not self.msf_client:
                return results
            
            # Verificar permisos sudo
            sudo_module = self.msf_client.modules.use('post', 'linux/gather/enum_sudo')
            sudo_module['SESSION'] = target
            sudo_result = sudo_module.execute()
            
            if sudo_result and "commands" in sudo_result:
                results["sudo_commands"] = sudo_result["commands"]
                if sudo_result["commands"]:
                    results["success"] = True
                    results["method"] = "sudo"
                    results["details"] = sudo_result
            
            # Buscar binarios SUID
            suid_module = self.msf_client.modules.use('post', 'linux/gather/enum_suid')
            suid_module['SESSION'] = target
            suid_result = suid_module.execute()
            
            if suid_result and "binaries" in suid_result:
                results["suid_binaries"] = suid_result["binaries"]
                if suid_result["binaries"]:
                    results["success"] = True
                    results["method"] = "suid"
                    results["details"] = suid_result
            
            # Verificar cron jobs
            cron_module = self.msf_client.modules.use('post', 'linux/gather/enum_cron')
            cron_module['SESSION'] = target
            cron_result = cron_module.execute()
            
            if cron_result and "jobs" in cron_result:
                results["cron_jobs"] = cron_result["jobs"]
                if cron_result["jobs"]:
                    results["success"] = True
                    results["method"] = "cron"
                    results["details"] = cron_result
            
            # Verificar exploits de kernel
            kernel_module = self.msf_client.modules.use('post', 'linux/gather/enum_kernel')
            kernel_module['SESSION'] = target
            kernel_result = kernel_module.execute()
            
            if kernel_result and "exploits" in kernel_result:
                results["kernel_exploits"] = kernel_result["exploits"]
                if kernel_result["exploits"]:
                    results["success"] = True
                    results["method"] = "kernel"
                    results["details"] = kernel_result
        
        except Exception as e:
            logger.error(f"Error al escalar privilegios en Linux: {str(e)}")
        
        return results
    
    def _escalate_windows(self, target: str, credentials: Dict = None) -> Dict:
        """Realiza escalación de privilegios en Windows"""
        results = {
            "success": False,
            "method": "",
            "details": {},
            "privileges": [],
            "services": [],
            "scheduled_tasks": [],
            "always_install_elevated": False
        }
        
        try:
            if not self.msf_client:
                return results
            
            # Verificar privilegios
            priv_module = self.msf_client.modules.use('post', 'windows/gather/enum_privs')
            priv_module['SESSION'] = target
            priv_result = priv_module.execute()
            
            if priv_result and "privileges" in priv_result:
                results["privileges"] = priv_result["privileges"]
                if priv_result["privileges"]:
                    results["success"] = True
                    results["method"] = "privileges"
                    results["details"] = priv_result
            
            # Verificar servicios
            service_module = self.msf_client.modules.use('post', 'windows/gather/enum_services')
            service_module['SESSION'] = target
            service_result = service_module.execute()
            
            if service_result and "services" in service_result:
                results["services"] = service_result["services"]
                if service_result["services"]:
                    results["success"] = True
                    results["method"] = "services"
                    results["details"] = service_result
            
            # Verificar tareas programadas
            task_module = self.msf_client.modules.use('post', 'windows/gather/enum_scheduled_tasks')
            task_module['SESSION'] = target
            task_result = task_module.execute()
            
            if task_result and "tasks" in task_result:
                results["scheduled_tasks"] = task_result["tasks"]
                if task_result["tasks"]:
                    results["success"] = True
                    results["method"] = "scheduled_tasks"
                    results["details"] = task_result
            
            # Verificar Always Install Elevated
            aie_module = self.msf_client.modules.use('post', 'windows/gather/enum_always_install_elevated')
            aie_module['SESSION'] = target
            aie_result = aie_module.execute()
            
            if aie_result and "enabled" in aie_result:
                results["always_install_elevated"] = aie_result["enabled"]
                if aie_result["enabled"]:
                    results["success"] = True
                    results["method"] = "always_install_elevated"
                    results["details"] = aie_result
        
        except Exception as e:
            logger.error(f"Error al escalar privilegios en Windows: {str(e)}")
        
        return results 