#!/usr/bin/env python3
"""
Fix Convert to Exploitation Format para preservar datos de ExploitDB
"""

import json
import re

def fix_exploitdb_preservation():
    # Cargar el workflow
    with open('workflows/Enumeracion___Explotacion.json', 'r', encoding='utf-8') as f:
        workflow = json.load(f)
    
    # Buscar el nodo "Convert to Exploitation Format"
    for node in workflow['nodes']:
        if node.get('name') == 'Convert to Exploitation Format':
            current_code = node['parameters']['jsCode']
            
            # Verificar si ya tiene preservaci√≥n de ExploitDB
            if 'exploitdbAnalysis' in current_code:
                print("‚úÖ El nodo ya tiene preservaci√≥n de ExploitDB")
                return
            
            # Agregar preservaci√≥n de datos de ExploitDB despu√©s de los datos de DC
            dc_section = "console.log('- machine_type:', dcAnalysis.machine_type || machineClassification.type);"
            
            exploitdb_addition = '''

// CRITICAL: Tambi√©n preservar datos de ExploitDB si existen
const exploitdbAnalysis = enumResult.exploitdb_analysis || {};
console.log('üîç DATOS DE EXPLOITDB:');
console.log('- exploits_found:', exploitdbAnalysis.exploits_found || 0);
console.log('- exploits:', (exploitdbAnalysis.exploits || []).length);
console.log('- evidence_file:', exploitdbAnalysis.evidence_file || 'none');'''
            
            # Insertar la adici√≥n despu√©s de la secci√≥n DC
            new_code = current_code.replace(dc_section, dc_section + exploitdb_addition)
            
            # Tambi√©n agregar los datos de ExploitDB al objeto exploitationData
            data_section = "vulnerabilities: [],\n    exploits: []"
            exploitdb_data_addition = '''vulnerabilities: [],
    exploits: [],
    exploitdb_analysis: exploitdbAnalysis'''
            
            new_code = new_code.replace(data_section, exploitdb_data_addition)
            
            # Agregar logging de ExploitDB en la validaci√≥n final
            validation_section = "console.log('- Puertos abiertos:', exploitationData.enumeration_results.detailed_results.service_enumeration.open_ports);"
            exploitdb_validation = '''console.log('- Puertos abiertos:', exploitationData.enumeration_results.detailed_results.service_enumeration.open_ports);
console.log('- Exploits encontrados:', (exploitationData.enumeration_results.exploitdb_analysis?.exploits || []).length);
console.log('- ExploitDB evidence file:', exploitationData.enumeration_results.exploitdb_analysis?.evidence_file || 'none');'''
            
            new_code = new_code.replace(validation_section, exploitdb_validation)
            
            # Actualizar el nodo
            node['parameters']['jsCode'] = new_code
            print("‚úÖ Agregada preservaci√≥n de datos de ExploitDB")
            break
    else:
        print("‚ùå No se encontr√≥ el nodo 'Convert to Exploitation Format'")
        return
    
    # Guardar el workflow actualizado
    with open('workflows/Enumeracion___Explotacion.json', 'w', encoding='utf-8') as f:
        json.dump(workflow, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Workflow actualizado con preservaci√≥n de datos de ExploitDB")

if __name__ == "__main__":
    fix_exploitdb_preservation() 