#!/bin/bash

# ============================================================================
# üîß INSTALADOR DE HERRAMIENTAS FALTANTES PARA PENTESTING
# ============================================================================
# Instala herramientas que faltan y son requeridas por los scripts
# ============================================================================

echo "üîß INSTALANDO HERRAMIENTAS FALTANTES"
echo "===================================="

# Funci√≥n para verificar si una herramienta existe
check_tool() {
    local tool=$1
    local description=$2
    
    if command -v "$tool" >/dev/null 2>&1; then
        echo "‚úÖ $tool - $description (ya instalado)"
        return 0
    else
        echo "‚ùå $tool - $description (NO ENCONTRADO)"
        return 1
    fi
}

# Funci√≥n para instalar herramientas
install_tool() {
    local tool=$1
    local package=$2
    local description=$3
    
    echo "üì• Instalando $tool ($description)..."
    
    if sudo apt update >/dev/null 2>&1 && sudo apt install -y "$package" >/dev/null 2>&1; then
        echo "   ‚úÖ $tool instalado correctamente"
        return 0
    else
        echo "   ‚ùå Error instalando $tool"
        return 1
    fi
}

# Lista de herramientas cr√≠ticas
echo "üîç Verificando herramientas necesarias..."
echo "-----------------------------------------"

missing_tools=()

# Verificar herramientas principales
tools=(
    "ssh-audit:ssh-audit:Auditor√≠a de configuraci√≥n SSH"
    "gobuster:gobuster:Descubrimiento de directorios y DNS"
    "nikto:nikto:Esc√°ner de vulnerabilidades web"
    "nc:netcat-traditional:Cliente/servidor TCP/UDP"
    "hydra:hydra:Herramienta de fuerza bruta"
    "enum4linux:enum4linux:Enumeraci√≥n SMB/NetBIOS"
    "sslscan:sslscan:Esc√°ner de SSL/TLS"
    "wpscan:wpscan:Esc√°ner de WordPress"
    "sqlmap:sqlmap:Herramienta de inyecci√≥n SQL"
    "dirb:dirb:Buscador de directorios web"
    "nmap:nmap:Esc√°ner de puertos y red"
    "masscan:masscan:Esc√°ner de puertos masivo"
    "searchsploit:exploitdb:Buscador de exploits"
)

for tool_info in "${tools[@]}"; do
    IFS=':' read -r tool package description <<< "$tool_info"
    if ! check_tool "$tool" "$description"; then
        missing_tools+=("$tool:$package:$description")
    fi
done

# Instalar herramientas faltantes
if [ ${#missing_tools[@]} -eq 0 ]; then
    echo ""
    echo "üéâ ¬°Todas las herramientas est√°n instaladas!"
else
    echo ""
    echo "üì¶ Instalando ${#missing_tools[@]} herramientas faltantes..."
    echo "=================================================="
    
    # Actualizar repositorios
    echo "üîÑ Actualizando repositorios..."
    sudo apt update >/dev/null 2>&1
    
    for tool_info in "${missing_tools[@]}"; do
        IFS=':' read -r tool package description <<< "$tool_info"
        install_tool "$tool" "$package" "$description"
    done
fi

# Verificaci√≥n final
echo ""
echo "üîç VERIFICACI√ìN FINAL"
echo "===================="

all_ok=true
for tool_info in "${tools[@]}"; do
    IFS=':' read -r tool package description <<< "$tool_info"
    if ! check_tool "$tool" "$description"; then
        all_ok=false
    fi
done

# Verificar herramientas espec√≠ficas para nuestros scripts
echo ""
echo "üéØ Verificando herramientas espec√≠ficas del proyecto..."
echo "-----------------------------------------------------"

# Verificar nuclei
if [ -f "/usr/bin/nuclei" ]; then
    echo "‚úÖ nuclei - Esc√°ner de vulnerabilidades (ya configurado)"
else
    echo "‚ùå nuclei - NO encontrado en /usr/bin/nuclei"
    all_ok=false
fi

# Verificar autobloody
if [ -f "/home/kali/.local/bin/autobloody" ]; then
    echo "‚úÖ autobloody - Herramienta AD (ya configurado)"
else
    echo "‚ùå autobloody - NO encontrado en /home/kali/.local/bin/autobloody"
    all_ok=false
fi

# Verificar ExploitDB
if [ -d "/usr/share/exploitdb" ]; then
    echo "‚úÖ exploitdb - Base de datos de exploits (ya configurado)"
else
    echo "‚ùå exploitdb - NO encontrado en /usr/share/exploitdb"
    all_ok=false
fi

# Instalar herramientas adicionales espec√≠ficas
echo ""
echo "üîß Instalando herramientas adicionales..."
echo "----------------------------------------"

# Instalar ssh-audit desde pip si no est√° disponible en apt
if ! command -v ssh-audit >/dev/null 2>&1; then
    echo "üì• Instalando ssh-audit desde pip..."
    if pip3 install ssh-audit >/dev/null 2>&1; then
        echo "   ‚úÖ ssh-audit instalado correctamente"
    else
        echo "   ‚ö†Ô∏è  Error instalando ssh-audit desde pip"
    fi
fi

# Verificar netcat alternativo
if ! command -v nc >/dev/null 2>&1; then
    echo "üì• Instalando netcat-openbsd como alternativa..."
    sudo apt install -y netcat-openbsd >/dev/null 2>&1
fi

# Resultado final
echo ""
echo "üìä RESUMEN FINAL"
echo "================"

if $all_ok; then
    echo "‚úÖ ¬°Todas las herramientas est√°n correctamente instaladas!"
    echo "üöÄ Los scripts de explotaci√≥n deber√≠an funcionar sin problemas"
    
    # Crear script de verificaci√≥n r√°pida
    cat > "/home/kali/kali-security-tools/scripts/verify-tools.sh" << 'EOF'
#!/bin/bash
echo "üîç Verificaci√≥n r√°pida de herramientas:"
tools=("nmap" "gobuster" "nikto" "hydra" "nuclei" "ssh-audit" "enum4linux" "sqlmap" "searchsploit")
for tool in "${tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        echo "‚úÖ $tool"
    else
        echo "‚ùå $tool"
    fi
done
EOF
    chmod +x "/home/kali/kali-security-tools/scripts/verify-tools.sh"
    echo "üìù Script de verificaci√≥n creado: scripts/verify-tools.sh"
    
else
    echo "‚ö†Ô∏è  Algunas herramientas a√∫n faltan"
    echo "üí° Puede que necesites instalarlas manualmente"
fi

echo ""
echo "‚úÖ Instalaci√≥n de herramientas completada" 