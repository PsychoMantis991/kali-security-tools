{
  "name": "04-Enhanced-Security-Audit",
  "nodes": [
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "target",
              "value": "={{ $json.target }}"
            },
            {
              "name": "intensity",
              "value": "={{ $json.intensity || 'medium' }}"
            },
            {
              "name": "scope",
              "value": "={{ $json.scope || 'full' }}"
            }
          ]
        }
      },
      "name": "Initialize Workflow",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Configuración inicial y validación\nconst config = {\n  target: $json.target,\n  intensity: $json.intensity,\n  scope: $json.scope,\n  timestamp: new Date().toISOString(),\n  workflow_id: Math.random().toString(36).substring(7)\n};\n\n// Validar entrada\nif (!config.target) {\n  throw new Error('Target is required');\n}\n\nreturn [{ json: config }];"
      },
      "name": "Validate Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/database_manager.py init_audit {{$json.workflow_id}} {{$json.target}} {{$json.intensity}}",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Initialize Database",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/network_discovery_workflow.py {{$json.target}} --intensity {{$json.intensity}} --output /home/kali/kali-security-tools/temp/discovery_{{$json.workflow_id}}.json",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Network Discovery",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [850, 200]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/database_manager.py store_discovery {{$json.workflow_id}} /home/kali/kali-security-tools/temp/discovery_{{$json.workflow_id}}.json",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Store Discovery Results",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "functionCode": "// Procesar resultados de descubrimiento\nconst fs = require('fs');\nconst discoveryFile = `/home/kali/kali-security-tools/temp/discovery_${$json.workflow_id}.json`;\nconst discovery = JSON.parse(fs.readFileSync(discoveryFile, 'utf8'));\n\n// Preparar hosts para escaneo\nconst hosts = discovery.active_hosts.map(host => ({\n  ip: host.ip,\n  status: host.status,\n  services: host.services || []\n}));\n\nreturn hosts.map(host => ({ json: { ...$json, host } }));"
      },
      "name": "Process Discovery Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "name": "Split Hosts",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/service-enum.py {{$json.host.ip}} --intensity {{$json.intensity}} --output /home/kali/kali-security-tools/temp/enum_{{$json.workflow_id}}_{{$json.host.ip}}.json",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Deep Service Enumeration",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/database_manager.py store_enumeration {{$json.workflow_id}} {{$json.host.ip}} /home/kali/kali-security-tools/temp/enum_{{$json.workflow_id}}_{{$json.host.ip}}.json",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Store Enumeration Results",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1850, 200]
    },
    {
      "parameters": {
        "functionCode": "// Analizar resultados de enumeración\nconst fs = require('fs');\nconst enumFile = `/home/kali/kali-security-tools/temp/enum_${$json.workflow_id}_${$json.host.ip}.json`;\nconst enumData = JSON.parse(fs.readFileSync(enumFile, 'utf8'));\n\n// Identificar vectores de ataque\nconst attackVectors = [];\n\nfor (const [port, service] of Object.entries(enumData.services || {})) {\n  if (service.state === 'open') {\n    // Análisis de servicios específicos\n    if (service.name === 'microsoft-ds') {\n      attackVectors.push({\n        type: 'smb',\n        port: port,\n        priority: 'high'\n      });\n    }\n    \n    if (service.name.includes('http')) {\n      attackVectors.push({\n        type: 'web',\n        port: port,\n        priority: 'medium'\n      });\n    }\n  }\n}\n\nreturn [{ json: { ...$json, attackVectors } }];"
      },
      "name": "Analyze Vulnerabilities",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2050, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.attackVectors.length}}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "name": "Has Attack Vectors?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2250, 200]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/exploit.py --target {{$json.host.ip}} --vectors /home/kali/kali-security-tools/temp/enum_{{$json.workflow_id}}_{{$json.host.ip}}.json --output /home/kali/kali-security-tools/temp/exploit_{{$json.workflow_id}}_{{$json.host.ip}}.json",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Exploitation",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [2450, 100]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/database_manager.py store_exploitation {{$json.workflow_id}} {{$json.host.ip}} /home/kali/kali-security-tools/temp/exploit_{{$json.workflow_id}}_{{$json.host.ip}}.json",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Store Exploitation Results",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [2650, 100]
    },
    {
      "parameters": {
        "functionCode": "// Recopilar resultados finales\nconst allResults = {\n  workflow_id: $json.workflow_id,\n  target: $json.target,\n  scan_summary: {\n    total_hosts: 0,\n    exploited_hosts: [],\n    vulnerabilities_found: 0,\n    credentials_found: 0\n  },\n  details: []\n};\n\n// Agregar resultados de cada nodo\nconst items = $items();\nfor (const item of items) {\n  if (item.json.exploited_hosts) {\n    allResults.scan_summary.exploited_hosts.push(...item.json.exploited_hosts);\n  }\n  allResults.details.push(item.json);\n}\n\nallResults.scan_summary.total_hosts = allResults.details.length;\nallResults.scan_summary.vulnerabilities_found = allResults.scan_summary.exploited_hosts.length;\n\nreturn [{ json: allResults }];"
      },
      "name": "Aggregate Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2850, 200]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/generate_advanced_report.py --workflow-id {{$json.workflow_id}} --output /home/kali/kali-security-tools/reports/audit_{{$json.workflow_id}}.html",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Generate Report",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [3050, 200]
    },
    {
      "parameters": {
        "command": "python3 /home/kali/kali-security-tools/scripts/database_manager.py finalize_audit {{$json.workflow_id}} /home/kali/kali-security-tools/reports/audit_{{$json.workflow_id}}.html",
        "cwd": "/home/kali/kali-security-tools"
      },
      "name": "Finalize Audit",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [3250, 200]
    }
  ],
  "connections": {
    "Initialize Workflow": {
      "main": [[{ "node": "Validate Input", "type": "main", "index": 0 }]]
    },
    "Validate Input": {
      "main": [[{ "node": "Initialize Database", "type": "main", "index": 0 }]]
    },
    "Initialize Database": {
      "main": [[{ "node": "Network Discovery", "type": "main", "index": 0 }]]
    },
    "Network Discovery": {
      "main": [[{ "node": "Store Discovery Results", "type": "main", "index": 0 }]]
    },
    "Store Discovery Results": {
      "main": [[{ "node": "Process Discovery Results", "type": "main", "index": 0 }]]
    },
    "Process Discovery Results": {
      "main": [[{ "node": "Split Hosts", "type": "main", "index": 0 }]]
    },
    "Split Hosts": {
      "main": [[{ "node": "Deep Service Enumeration", "type": "main", "index": 0 }]]
    },
    "Deep Service Enumeration": {
      "main": [[{ "node": "Store Enumeration Results", "type": "main", "index": 0 }]]
    },
    "Store Enumeration Results": {
      "main": [[{ "node": "Analyze Vulnerabilities", "type": "main", "index": 0 }]]
    },
    "Analyze Vulnerabilities": {
      "main": [[{ "node": "Has Attack Vectors?", "type": "main", "index": 0 }]]
    },
    "Has Attack Vectors?": {
      "main": [
        [{ "node": "Exploitation", "type": "main", "index": 0 }],
        [{ "node": "Aggregate Results", "type": "main", "index": 0 }]
      ]
    },
    "Exploitation": {
      "main": [[{ "node": "Store Exploitation Results", "type": "main", "index": 0 }]]
    },
    "Store Exploitation Results": {
      "main": [[{ "node": "Aggregate Results", "type": "main", "index": 0 }]]
    },
    "Aggregate Results": {
      "main": [[{ "node": "Generate Report", "type": "main", "index": 0 }]]
    },
    "Generate Report": {
      "main": [[{ "node": "Finalize Audit", "type": "main", "index": 0 }]]
    }
  },
  "active": true,
  "settings": {
    "executionTimeout": 7200,
    "maxExecutionTime": 7200,
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler"
  },
  "tags": ["security", "audit", "enhanced", "database"]
} 