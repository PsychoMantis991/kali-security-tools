{
  "name": "Enumeracion",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://brief-woman-93.webhook.cool/",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        10840,
        4520
      ],
      "id": "a88a2043-6edc-4c9b-a6ca-c2332997fe36",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "httpMethod": "GET,POST",
        "path": "scan-network",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "b518b909-db59-45d3-8b68-4178525614ff",
      "name": "Start Network Scan",
      "type": "n8n-nodes-base.webhook",
      "position": [
        9280,
        4840
      ],
      "webhookId": "scan-network-webhook",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// Configuración básica del escaneo\nconst input = items[0].json;\nconst params = input.query || input.body || {};\n\n// Valores por defecto\nconst defaultConfig = {\n  target: '127.0.0.1',\n  scan_intensity: 'medium',\n  evasion: true,\n  max_threads: 5,\n  timeout: 300\n};\n\n// Validar y procesar el objetivo\nconst target = params.target_network || params.target || defaultConfig.target;\nconsole.log('Target procesado:', target);\n\n// Validar y procesar la intensidad\nconst validIntensities = ['low', 'medium', 'high', 'stealth', 'full'];\nconst scan_intensity = params.intensity || params.scan_intensity || defaultConfig.scan_intensity;\nif (!validIntensities.includes(scan_intensity)) {\n  throw new Error('La intensidad debe ser: low, medium, high, stealth o full');\n}\n\n// Construir la configuración final\nconst config = {\n  target: target,\n  scan_intensity: scan_intensity,\n  evasion: params.evasion !== false,\n  max_threads: parseInt(params.max_threads) || defaultConfig.max_threads,\n  timeout: parseInt(params.timeout) || defaultConfig.timeout,\n  execution_id: 'scan_' + Date.now()\n};\n\nconsole.log('Configuración final:', JSON.stringify(config, null, 2));\nreturn [{ json: config }];"
      },
      "id": "e72e309c-d4e7-438a-bc72-a87bc146c91e",
      "name": "Configure Scan Parameters",
      "type": "n8n-nodes-base.code",
      "position": [
        9500,
        4840
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Preparar el comando para el escaneo de puertos\nconst config = items[0].json;\n\n// Log para depuración\nconsole.log('Configuración recibida:', JSON.stringify(config, null, 2));\n\n// Construir el comando completo\nconst command = `cd /home/kali/kali-security-tools && python3 scripts/port-discovery.py \"${config.target}\" --intensity ${config.scan_intensity} --service-detection --output \"temp/ports_${config.target.replace(/\\./g, '_')}.json\"`;\n\nconsole.log('Comando preparado:', command);\n\nreturn [{ \n  json: { \n    command: command,\n    config: config,\n    target: config.target,\n    intensity: config.scan_intensity\n  } \n}];"
      },
      "id": "53589277-0591-426f-99e3-1e7e57c5dc71",
      "name": "Prepare Command",
      "type": "n8n-nodes-base.code",
      "position": [
        9620,
        4840
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "command": "={{ $json.command }}"
      },
      "id": "76427698-db3b-434f-b555-6a6cac65ebf3",
      "name": "Port Discovery",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        9720,
        4840
      ],
      "typeVersion": 1,
      "executeOnce": false,
      "alwaysOutputData": true,
      "outputBinary": false,
      "outputPath": "stdout",
      "outputPropertyName": "output",
      "outputPropertyPath": "output",
      "outputPropertyType": "string",
      "outputPropertyValue": "={{ $json.stdout }}",
      "outputPropertyValuePath": "stdout",
      "outputPropertyValueType": "string"
    },
    {
      "parameters": {
        "jsCode": "// Procesar resultados del descubrimiento de puertos\nconst result = items[0].json;\n\n// Log para depuración\nconsole.log('Datos recibidos en Process Port Discovery:');\nconsole.log(JSON.stringify(result, null, 2));\n\n// Verificar que tenemos salida del comando\nif (!result.stdout) {\n  console.error('No se recibió salida del comando');\n  console.error('Datos completos:', JSON.stringify(result, null, 2));\n  return [{\n    json: {\n      success: false,\n      error: 'No output received from command',\n      execution_id: Date.now()\n    }\n  }];\n}\n\n// Extraer el JSON de la salida stdout\nlet scanResult;\ntry {\n  scanResult = JSON.parse(result.stdout);\n} catch (e) {\n  console.error('Error parseando JSON:', e);\n  console.error('Output que causó el error:', result.stdout);\n  return [{\n    json: {\n      success: false,\n      error: `Error procesando resultados del escaneo: ${e.message}`,\n      execution_id: Date.now()\n    }\n  }];\n}\n\n// Verificar si hay puertos abiertos\nconst openPorts = Array.isArray(scanResult.open_ports) ? scanResult.open_ports : [];\n\nconsole.log('Puertos encontrados:', openPorts);\nconsole.log('Tipo de openPorts:', typeof openPorts);\nconsole.log('Es array:', Array.isArray(openPorts));\n\n// Preparar resultado para enumeración de servicios\nconst portDiscoveryResult = {\n  success: true,\n  target: scanResult.target,\n  execution_id: scanResult.scan_info?.timestamp || Date.now(),\n  open_ports: openPorts.map(port => port.toString()), // Asegurar que los puertos son strings\n  services: scanResult.services || {},\n  scan_config: {\n    intensity: scanResult.scan_info?.intensity || 'medium',\n    service_detection: scanResult.scan_info?.service_detection || false\n  }\n};\n\nconsole.log('Resultado procesado:');\nconsole.log(JSON.stringify(portDiscoveryResult, null, 2));\n\nreturn [{ json: portDiscoveryResult }];"
      },
      "id": "fc19133f-4326-4d85-a0c6-d9372ce3d271",
      "name": "Process Port Discovery",
      "type": "n8n-nodes-base.code",
      "position": [
        9940,
        4840
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "id": "bf19aae9-3706-41e9-9572-d5d122342254",
      "name": "Check Port Discovery Success",
      "type": "n8n-nodes-base.if",
      "position": [
        10160,
        4840
      ],
      "typeVersion": 1,
      "executeOnce": false,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Preparar comando de enumeración\nconst portData = items[0].json;\n\n// Log detallado de los datos recibidos\nconsole.log('Datos recibidos en Prepare Service Enum Command:');\nconsole.log(JSON.stringify(portData, null, 2));\n\nconst target = portData.target;\nconst intensity = portData.scan_config?.intensity || 'medium';\nconst openPorts = Array.isArray(portData.open_ports) ? portData.open_ports : [];\n\nconsole.log('Datos procesados:');\nconsole.log('Target:', target);\nconsole.log('Intensity:', intensity);\nconsole.log('Open Ports:', openPorts);\nconsole.log('Tipo de openPorts:', typeof openPorts);\nconsole.log('Es array:', Array.isArray(openPorts));\n\n// Verificar que tenemos puertos para escanear\nif (!openPorts.length) {\n  console.error('No se encontraron puertos abiertos en los datos recibidos');\n  console.error('Datos completos:', JSON.stringify(portData, null, 2));\n  throw new Error('No open ports found to enumerate');\n}\n\n// Configurar intensidad\nlet nmapOptions = '-sV -sC'; // Detección de versiones y scripts por defecto\n\nswitch(intensity) {\n  case 'low':\n    nmapOptions += ' -T2'; // Más lento pero más sigiloso\n    break;\n  case 'medium':\n    nmapOptions += ' -T3'; // Balance entre velocidad y sigilo\n    break;\n  case 'high':\n    nmapOptions += ' -T4'; // Más rápido\n    break;\n  case 'stealth':\n    nmapOptions += ' -T2 --max-retries 1 --max-scan-delay 10s';\n    break;\n  case 'full':\n    nmapOptions += ' -T4 -A'; // Agresivo, incluye OS detection\n    break;\n}\n\n// Construir comando\nconst ports = openPorts.join(',');\nconst cmd = `nmap ${nmapOptions} -p${ports} ${target}`;\n\nconsole.log('Comando generado:', cmd);\n\nreturn [{\n  json: {\n    command: cmd,\n    target: target,\n    intensity: intensity,\n    open_ports: openPorts\n  }\n}];"
      },
      "id": "1d80290b-59a0-49e4-a307-22e944bf27ce",
      "name": "Prepare Service Enum Command",
      "type": "n8n-nodes-base.code",
      "position": [
        9780,
        4740
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "command": "={{ $json.command }}"
      },
      "id": "e7213b1f-6114-4967-866a-5f5ca5c629a3",
      "name": "Service Enumeration",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        9980,
        4740
      ],
      "typeVersion": 1,
      "executeOnce": false,
      "alwaysOutputData": true,
      "outputBinary": false,
      "outputPath": "output",
      "outputPropertyName": "output",
      "outputPropertyPath": "output",
      "outputPropertyType": "string",
      "outputPropertyValue": "={{ $json.output }}",
      "outputPropertyValuePath": "output",
      "outputPropertyValueType": "string"
    },
    {
      "parameters": {
        "command": "cd /home/kali/kali-security-tools && python3 scripts/process-nmap-output.py /home/kali/kali-security-tools/temp/nmap_output.txt /home/kali/kali-security-tools/temp/ports_10.129.31.83.json"
      },
      "id": "e009c172-16c1-42d5-89d2-08a8394d45c2",
      "name": "Process Nmap Output",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        10200,
        4740
      ],
      "typeVersion": 1,
      "executeOnce": false,
      "alwaysOutputData": true,
      "outputBinary": false,
      "outputPath": "stdout",
      "outputPropertyName": "output",
      "outputPropertyPath": "output",
      "outputPropertyValue": "={{ $json.stdout }}",
      "outputPropertyValuePath": "stdout",
      "outputPropertyValueType": "string"
    },
    {
      "parameters": {
        "jsCode": "// Consolidar resultados finales\nconst result = items[0].json;\n\n// Log para depuración\nconsole.log('Datos recibidos:', JSON.stringify(result, null, 2));\n\n// Extraer el JSON de la salida stdout\nlet serviceEnumResult;\ntry {\n  serviceEnumResult = JSON.parse(result.stdout);\n} catch (e) {\n  console.error('Error parseando JSON:', e);\n  return [{\n    json: {\n      success: false,\n      error: 'Error procesando resultados de enumeración',\n      execution_id: Date.now()\n    }\n  }];\n}\n\n// Verificar éxito de enumeración\nif (!serviceEnumResult || serviceEnumResult.error) {\n  return [{\n    json: {\n      success: false,\n      error: serviceEnumResult?.error || 'Service enumeration failed',\n      execution_id: Date.now()\n    }\n  }];\n}\n\n// Procesar resultados\nconst services = serviceEnumResult.services || {};\nconst vulnerabilities = serviceEnumResult.vulnerabilities || [];\n\n// Análisis de servicios\nconst serviceAnalysis = {\n  web_services: [],\n  database_services: [],\n  remote_access: [],\n  critical_services: [],\n  all_services: new Set()\n};\n\n// Categorizar servicios\nObject.entries(services).forEach(([port, service]) => {\n  if (service?.service) {\n    const serviceName = service.service.toLowerCase();\n    const version = service.version || 'Unknown';\n\n    serviceAnalysis.all_services.add(serviceName);\n    \n    if (['http', 'https', 'ssl/http', 'http-alt'].includes(serviceName)) {\n      serviceAnalysis.web_services.push({ port, service: serviceName, version });\n    }\n    if (['mysql', 'postgresql', 'mssql', 'oracle', 'mongodb'].includes(serviceName)) {\n      serviceAnalysis.database_services.push({ port, service: serviceName, version });\n    }\n    if (['ssh', 'telnet', 'rdp', 'vnc', 'ftp'].includes(serviceName)) {\n      serviceAnalysis.remote_access.push({ port, service: serviceName, version });\n    }\n    if (['smb', 'netbios-ssn', 'microsoft-ds', 'ldap'].includes(serviceName)) {\n      serviceAnalysis.critical_services.push({ port, service: serviceName, version });\n    }\n  }\n});\n\n// Generar reporte final\nconst finalResult = {\n  success: true,\n  scan_completed: new Date().toISOString(),\n  execution_id: serviceEnumResult.scan_info?.timestamp || Date.now(),\n  target: serviceEnumResult.target,\n  \n  summary: {\n    open_ports: serviceEnumResult.open_ports?.length || 0,\n    services_found: serviceAnalysis.all_services.size,\n    vulnerabilities_found: vulnerabilities.length\n  },\n  \n  findings: {\n    web_services: serviceAnalysis.web_services,\n    database_services: serviceAnalysis.database_services,\n    remote_access: serviceAnalysis.remote_access,\n    critical_services: serviceAnalysis.critical_services\n  },\n  \n  risk_assessment: {\n    high_risk: serviceAnalysis.database_services.length + serviceAnalysis.critical_services.length,\n    medium_risk: serviceAnalysis.remote_access.length,\n    low_risk: serviceAnalysis.web_services.length\n  },\n  \n  recommendations: [\n    serviceAnalysis.web_services.length > 0 ? 'Revisar configuración de servicios web' : null,\n    serviceAnalysis.database_services.length > 0 ? 'Asegurar bases de datos expuestas' : null,\n    serviceAnalysis.remote_access.length > 0 ? 'Verificar servicios de acceso remoto' : null,\n    serviceAnalysis.critical_services.length > 0 ? 'Revisar servicios críticos' : null\n  ].filter(Boolean),\n  \n  detailed_results: {\n    service_enumeration: serviceEnumResult,\n    service_analysis: {\n      all_services: Array.from(serviceAnalysis.all_services)\n    },\n    vulnerabilities: vulnerabilities\n  }\n};\n\nconsole.log('Resultado final:', JSON.stringify(finalResult, null, 2));\n\nreturn [{ json: finalResult }];"
      },
      "id": "2ecd7855-5e3d-4740-9d5d-74bb8fb67418",
      "name": "Generate Final Report",
      "type": "n8n-nodes-base.code",
      "position": [
        10620,
        4740
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "38714ea8-355c-4343-85ff-4803bba7b09f",
      "name": "Return Success Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        10840,
        4740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "a4f09a11-15d8-41da-91ca-71c0d6076123",
      "name": "Return Error Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        10380,
        4940
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Start Network Scan": {
      "main": [
        [
          {
            "node": "Configure Scan Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Scan Parameters": {
      "main": [
        [
          {
            "node": "Prepare Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Command": {
      "main": [
        [
          {
            "node": "Port Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Port Discovery": {
      "main": [
        [
          {
            "node": "Process Port Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Port Discovery": {
      "main": [
        [
          {
            "node": "Check Port Discovery Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Port Discovery Success": {
      "main": [
        [
          {
            "node": "Prepare Service Enum Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Error Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Service Enum Command": {
      "main": [
        [
          {
            "node": "Service Enumeration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Service Enumeration": {
      "main": [
        [
          {
            "node": "Process Nmap Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Nmap Output": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Final Report": {
      "main": [
        [
          {
            "node": "Return Success Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "799d20fd-1b3c-4d96-b1b9-a256cfb9636c",
  "meta": {
    "instanceId": "890910e1d7999d9b9aecf7e499bf3f9992b84f7f80d8f00fcf81b8525eaacaa9"
  },
  "id": "w0aEaselTs3rbFim",
  "tags": [
    {
      "name": "enumeration",
      "id": "0Dq3pVrbHcLZlxTF",
      "createdAt": "2025-06-05T14:14:54.897Z",
      "updatedAt": "2025-06-05T14:14:54.897Z"
    },
    {
      "name": "network-audit",
      "id": "7by2S7NG5tBxDwBa",
      "createdAt": "2025-06-05T14:14:54.911Z",
      "updatedAt": "2025-06-05T14:14:54.911Z"
    },
    {
      "createdAt": "2025-06-04T17:18:21.598Z",
      "updatedAt": "2025-06-04T17:18:21.598Z",
      "id": "JGDyFfNI94PhcuSO",
      "name": "security-audit"
    },
    {
      "createdAt": "2025-06-04T16:59:45.610Z",
      "updatedAt": "2025-06-04T16:59:45.610Z",
      "id": "P1nW2XXoMkyTgrwx",
      "name": "security-audit-robust"
    },
    {
      "createdAt": "2025-06-04T17:16:47.255Z",
      "updatedAt": "2025-06-04T17:16:47.255Z",
      "id": "PjMBNYXZxa3zbU61",
      "name": "security-scan"
    },
    {
      "name": "complete-audit",
      "id": "YpPnzG6vQ98fJ1GL",
      "createdAt": "2025-06-05T14:14:54.905Z",
      "updatedAt": "2025-06-05T14:14:54.905Z"
    },
    {
      "name": "fixed-405-error",
      "id": "ZTuOnZJWHOrpVnaD",
      "createdAt": "2025-06-05T14:14:54.932Z",
      "updatedAt": "2025-06-05T14:14:54.932Z"
    },
    {
      "createdAt": "2025-06-04T16:59:45.623Z",
      "updatedAt": "2025-06-04T16:59:45.623Z",
      "id": "g9jR7bMwD8vDD5zz",
      "name": "error-handling"
    },
    {
      "name": "discovery",
      "id": "q9WfChDf1vxKwzMs",
      "createdAt": "2025-06-05T14:14:54.887Z",
      "updatedAt": "2025-06-05T14:14:54.887Z"
    },
    {
      "name": "get-post-compatible",
      "id": "qKFZrpC9VU6FauIR",
      "createdAt": "2025-06-05T14:14:54.924Z",
      "updatedAt": "2025-06-05T14:14:54.924Z"
    },
    {
      "name": "docker-optimized",
      "id": "zJrQhcLXXjU1cNNK",
      "createdAt": "2025-06-05T14:14:54.919Z",
      "updatedAt": "2025-06-05T14:14:54.919Z"
    }
  ]
}